# Python Programming

# LISTs

>>> fruits=['apple','orange','apple','banana','kiwi','pear','banana']
>>> fruits.count('apple')
2
>>> fruits.count('xyz')
0
>>> fruits.count('banana')
2
>>> fruits.index('banana')
3
>>> fruits.index('banana',4) # find the next banana starting a position 4
6
>>> fruits.reverse()
>>> fruits
['banana', 'pear', 'kiwi', 'banana', 'apple', 'orange', 'apple']
>>> fruits.append('grape')
>>> fruits
['banana', 'pear', 'kiwi', 'banana', 'apple', 'orange', 'apple', 'grape']
>>> fruits.sort()
>>> fruits
['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']
>>> fruits.pop()
'pear'
>>> fruits
['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange']
>>> 
>>> fruits.insert(4,'guava')
>>> fruits
['apple', 'apple', 'banana', 'banana', 'guava', 'grape', 'kiwi', 'orange']
>>> fruits.remove('banana')
>>> fruits
['apple', 'apple', 'banana', 'guava', 'grape', 'kiwi', 'orange']
>>> 


# DEQUE

>>> fruits.pop()
'orange'
>>> fruits.popleft()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'popleft'
>>> 
>>> import collections
>>> dir(collections)
['ChainMap', 'Counter', 'OrderedDict', 'UserDict', 'UserList', 'UserString', '_Link', '_OrderedDictItemsView', '_OrderedDictKeysView', '_OrderedDictValuesView', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__getattr__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '_chain', '_collections_abc', '_count_elements', '_eq', '_heapq', '_iskeyword', '_itemgetter', '_nt_itemgetters', '_proxy', '_recursive_repr', '_repeat', '_starmap', '_sys', 'defaultdict', 'deque', 'namedtuple']
>>> 
>>> from collections import deque
>>> fruits.popleft()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'popleft'
>>> 
>>> queue=deque(['Java','Perl','Python'])
>>> queue.append('C++')
>>> queue
deque(['Java', 'Perl', 'Python', 'C++'])
>>> queue.pop()
'C++'
>>> queue.popleft()
'Java'
>>> queue
deque(['Perl', 'Python'])
>>> 


# LIST COMPREHENSION

>>> sq=[]
>>> for i in range(10):
...     sq.append(i**2)
... 
>>> sq
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 

>>> sq=[i**2 for i in range(10)]  # LC
>>> sq
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>>

>>> sq=list(map(lambda i:i**2, range(10)))
>>> sq
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

>>> sq=list((lambda i:i**2, range(10)))
>>> sq
[<function <lambda> at 0x7fad78498560>, range(0, 10)]
>>> 

# Ex:

>>> for i in range(10):
...     for j in range(5):
...             print((i,j),end=',')
... 
(0, 0),(0, 1),(0, 2),(0, 3),(0, 4),(1, 0),(1, 1),(1, 2),(1, 3),(1, 4),(2, 0),(2, 1),(2, 2),(2, 3),(2, 4),(3, 0),(3, 1),(3, 2),(3, 3),(3, 4),(4, 0),(4, 1),(4, 2),(4, 3),(4, 4),(5, 0),(5, 1),(5, 2),(5, 3),(5, 4),(6, 0),(6, 1),(6, 2),(6, 3),(6, 4),(7, 0),(7, 1),(7, 2),(7, 3),(7, 4),(8, 0),(8, 1),(8, 2),(8, 3),(8, 4),(9, 0),(9, 1),(9, 2),(9, 3),(9, 4),>>> 
>>> 
>>> [(i,j) for i in range(10) for j in range(5)]
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (9, 0), (9, 1), (9, 2), (9, 3), (9, 4)]
>>> 







