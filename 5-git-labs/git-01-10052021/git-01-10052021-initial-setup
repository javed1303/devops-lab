Create an Account in https://github.com   # UI

CLI:
$ sudo su 
$ yum update -y OR $ apt-get update 
$ yum install git
$ git --version
$ git config --global user.name "<user_name>"
$ git config --global user.email "gmail_id"
$ git config --list

ubuntu@ip-172-31-7-0:~/git/devops-lab/git-labs$ git config --list
user.name=xavyaly
user.email=wellboy.alam13@gmail.com
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=git@github.com:xavyaly/devops-lab.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
ubuntu@ip-172-31-7-0:~/git/devops-lab/git-labs$

--------------------------------------------------------------------------------------------------------

Create an Account on AWS/Azure/GCP 

--------------------------------------------------------------------------------------------------------

Download putty

--------------------------------------------------------------------------------------------------------

Download puttygen # convert "*.pem" file to "*.ppk" file, do google how to convert if face challenges 

--------------------------------------------------------------------------------------------------------

Create an EC2 Instance in AWS 

--------------------------------------------------------------------------------------------------------

Connect AWS Instance through putty 

--------------------------------------------------------------------------------------------------------

Clone:

$ git clone https://github.com/xavyaly/devops-lab.git   

$ git clone git@github.com:xavyaly/devops-lab.git   # add SSH and GPG Key (google) (paste ur *.pem file into text box)

--------------------------------------------------------------------------------------------------------

fork in UI

https://blog.scottlowe.org/2015/01/27/using-fork-branch-git-workflow/

Using the Fork-and-Branch Git Workflow
Fork a GitHub repository.
Clone the forked repository to your local system.
Add a Git remote for the original repository.
Create a feature branch in which to place your changes.
Make your changes to the new branch.
Commit the changes to the branch.
Push the branch to GitHub.

--------------------------------------------------------------------------------------------------------

Git Book:
https://git-scm.com/book/en/v2

--------------------------------------------------------------------------------------------------------

Git Installation:
https://www.atlassian.com/git/tutorials/install-git
https://git-scm.com/downloads
https://github.com/xavyaly/Git

--------------------------------------------------------------------------------------------------------

Create an account in Git:
https://github.com/

--------------------------------------------------------------------------------------------------------

Migration of SVN from GIT ?
https://www.atlassian.com/git/tutorials/migrating-overview

--------------------------------------------------------------------------------------------------------

GIT VS GITHUB:
Git is the tool, GitHub is the service for projects that use Git.

--------------------------------------------------------------------------------------------------------

Git Repository:
A file location where you can store all the files related to your project.
When you Git commit your code, a version/snapshot is created in your local repo.
Remote repository: A remote repository generally lies somewhere outside your system, on a remote machine.

--------------------------------------------------------------------------------------------------------

Branches:
A branch in Git is simply a lightweight movable pointer to one of these commits.
The default branch in GIT is master.
As you initially make commits, you’re given a master branch that points to the last commit you made.
Multiple branches pointing into the commit’s data history.

--------------------------------------------------------------------------------------------------------

Features:
Git feature branch workflow is branching model focused, meaning that it is a guiding framework for managing and creating branches,
Th Git flow, and Git Forking workflows use a Git feature branch workflow in regards to their branching models

--------------------------------------------------------------------------------------------------------







