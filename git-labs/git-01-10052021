Introduction to Git:

In previous time, when we work on a software development project we use to 
write different codes manually, merge that & compile.

------------------------------------------------------------------------------------------------------------------------------
Diagram-1:
------------------------------------------------------------------------------------------------------------------------------

It is very hard for a manager to remember who is giving which code.
So, to merge that codes we used a tool instead of person i.e. Software Configuration Management or Source Code Management. 
It is used to manage versions of code, giving versions to codes to remember file.

Types of source code management:

1-Centralised version control system.
2-Distributed Version control system

Centralized Control Version System(CVCS):

Before git we use cvcs.

------------------------------------------------------------------------------------------------------------------------------
Diagram-2: Architecture of CVCS
------------------------------------------------------------------------------------------------------------------------------

SVN tool is used in cvcs.

Drawback of CVCS:

➢ It’s not locally available, meaning you always need to be connected to a network to perform any action.
➢ Since everything is centralized, if central repository or server gets failed or crashed, you will loose entire data.

Distributed Control Version System(DVCS):

In DVCS, every contributor has a local copy or ‘clone’ of the central repository 
i.e. everyone maintain a local repository of their own which contains all the files & metadata present in main repository.

➢ Git is a DVCS.
➢ Git is manufactured by Linus Torvald in 2005.
➢ Before git linux uses bit keeper. It is a third party software. Linux uses bit keeper for versioning or version control.
➢ Linux stop using bit keeper because of some deal issue.
➢ Git is designed for linux kernel. It works on linux kernel.
➢ Git is a software or tool. It can be downloaded from internet.
➢ Github is different from git. It works on remote level.
➢ Git is a service work on local system level to manage versioning.
➢ In DVCS, we work on local system & save that work in local hard disk.
➢ Internet is not required to do any work because data will save in your system first.
➢ If repository(remote server) goes down or crashes, then no need to worry because your data will be saved in your local repository.
➢ Distributed means your code copy of same work is distributed at more than one place.
➢ Version control means, if you change your data very small then all teammates will know.

------------------------------------------------------------------------------------------------------------------------------
Diagram-3: Architecture of DVCS
------------------------------------------------------------------------------------------------------------------------------

Difference between CVCS & DVCS:-

CVCS:

In this, a client need to get local copy of source from server do the changes required & commit those changes to central source on server.
Cvcs system are easy to learn & setup.
Working on branches is difficult in cvcs. Developer often faces merge conflict.
Cvcs system don’t provide offline access.
Cvcs is slower as every command needs to communicate with server.
If cvcs server is down developer can’t work.
Don’t have personal working copy.

DVCS:

In DVCS, each client can have a local repository as well as have a complete history on it, client need to push the changes to branch which will be pushed then to server repository.
Dvcs system are different for beginners. Multiple commands needs to be remembered.
Working on branches is easier in Dvcs. Developers faces less conflict.
Dvcs systems are working fine on offline mode as a client copies the entire repository on their local machine.
Dvcs is faster as mostly user deals with local copy without lifting server every time.
If dvcs server is down, developer can work using their local copies.

------------------------------------------------------------------------------------------------------------------------------

Remember:

➢ Before CVCS, local version control system was used.
➢ It is used to save your codes on your local PC or Laptop, But if your PC or Laptop is crashed then all data will be lost.

------------------------------------------------------------------------------------------------------------------------------

Stages of Git & It’s Terminology:

Git workflow with Github:

Stages Description:

1 Launch linux machine

2 Install git

3 Make a directory

4 Run git init(above directory converts into .git repository(local repo)

5 
.git will divide into 3 region:
->workspace/working directory
->staging area
->local repo

6 Coding is done into workspace

7 Add coding file in staging area

8 Now commit code file from staging area to local repo branch

9 Push coding file to central repo(github)

10 
Pulling code to other machine from github, you can see data in local 
repo/staging area/working director

------------------------------------------------------------------------------------------------------------------------------
Diagram-4: Working process of git
------------------------------------------------------------------------------------------------------------------------------

Repository:-

➢ It’s a place where you have all your codes or kind of folder in server.
➢ It’s a kind of folder related to one product.
➢ Changes are personal to that particular repository.

Server:- 
It stores all repository(local repo is also a server but it is private server). It contains metadata also.

Working Directory:-

➢ Where you see files physically & do modification.
➢ At a time you can work on particular branch.
➢ In CVCS, developers generally makes modification & commit their changes 
directly to the repository. But git uses different strategy, it doesn’t track 
each & every modified file. Whenever you do commit an operation, git 
looks for the files present in the staging area, only those files present in the 
staging area are considered for commit & not all the modified files.

------------------------------------------------------------------------------------------------------------------------------
Diagram-5: Summary of git workflow
------------------------------------------------------------------------------------------------------------------------------

Commit:-

➢ It means sending code file from staging area to local repository.
➢ It stores changes in local repository you will get an commit-ID.
➢ It’s a 40 alpha-numeric characters.
➢ It uses SHA-1 checksum concept.
➢ Even if you change one dot(.) commit-ID will get changed.

SHA-1 Checksum Concept:-

➢ If you have a code of 1000 words in a file, so SHA-1 checksum will evaluate 
a binary value(like 234123411) & file will be sent to a person. Other side 
there will be SHA-1 checksum implemented & the output value for SHA-1 of 
that file is also same as sender value then it means there is no changes are 
made in that file, receiver gets that file as it is sent by sender.
➢ If any small changes is done like dot(.) then SHA-1 checksum value will be 
changed.
➢ It is used to know the status of code is changed or not in between sending 
& receiving.

Commit-ID/Version-ID/Version:-

➢ Reference to identity each change.
➢ To identify who changed the file.

Tags:- 
It assign a meaningful name with a specific version in the repository, once a 
tag is created for a particular save, even if you create anew commit, it will not be updated.

Snapshots(Increamental Backup):-

➢ Represents some data of a particular time.
➢ It is always incremental i.e. it stores the changed(appended data) only, not 
entire copy.
➢ It’ll save only updated stuff previous code will not be saved with new code 
line as a new file, but when you retrieve all code line it will automatically 
merge old & new code line Y show all code line in a single file.

Push:- 
Push operation copies the changes from a local repository server to a 
remote or central repo. It is used to store changes permanently into the git 
repository.

Pull:- 
Pull operation copies the changes from a remote repository to a local machine.

Branch:-

➢ Product is same, so one repository but different task .
➢ Each task has one separate branch.
➢ Finally merges all branches(code).
➢ Useful when you want to work parallel.
➢ Can create one branch on the basis of another branch.
➢ Changes are personal to that particular branch.
➢ Default branch is ‘Master’.
➢ File created in workspace will be visible in any of the branch workspace 
until you commit. Once you commit then that file belongs to that 
particular branch.

Advantages of Git:-

➢ Free & open source.
➢ Fast & Small:- As most of the operations are performed locally, 
therefore it’s fast. Small in size too.
➢ Security:- Git uses a common cryptographic hash function called secure 
hash function(SHA-1) to name & identify objects within it’s database.
➢ No need of powerful hardware.
➢ Easier Branching:- If we create a new branch, it’ll copy all the codes to 
the new branch.

Types of Repositories:-

I. Bare Repository(Central Repo)
✓ Store & share only.
✓ All central repositories are bare repo.
II. Non-Bare Repository(Local Repo)
✓ Where you can modify the files.
✓ All local repositories are non-bare repository.

------------------------------------------------------------------------------------------------------------------------------
Lab-1
------------------------------------------------------------------------------------------------------------------------------

How to use git & create github account?

Configuring git:-

➢ sudo su
➢ yum update –y
➢ yum install git
➢ git –version
➢ git config –global user.name “abdul”
➢ git config –global user.email abdul@gmail.com
➢ git config –list (to see created user in git)















